#!@PERL_EXECUTABLE@ -w
################################################################################
# This is '@SELF@', a @NAME@'s file
################################################################################
#
# VERSION:    @VERSION@, @DATE@
# AUTHOR:     @AUTHOR@
# MAINTAINER: @MAINTAINER@
# LICENSE:    @LICENSE@
#
################################################################################
# Coding style: emulate <TAB> characters with 4 spaces, thanks!
################################################################################
#
# @SELF@      Automatic OS installer configuration
# 
################################################################################

=pod

=head1 NAME

aii-osinstall - create/remove configuration files of the OS installer

=head1 SYNOPSIS

 aii-osinstall [options] <--configure <hostname>     |
                          --configurelist <filename> |
                          --remove <hostname>        |
                          --removelist <filename>    |
                          --removeall >

=head1 DESCRIPTION

aii-osinstall manages configuration files required by the OS installaler.
(for example RedHat KickStart files). It access via CCM to the local
caches, created by aii-shellfe, and it is executed by aii-shellfe.
Hostnames can be specified via command line (for just one host) or via text
files (for more than one host).

Currently it supports RedHat KickStart files.

Command line line options override default values in 
@QTTR_ETC@/aii-osinstall.conf.


=head1 COMMANDS

=over 4

=item --configure <hostname>

Configure <hostname> for the installation. The KickStart template name
and the parameters required to fill the template are read directly from
the local caches previously downloaded by aii-shellfe.

=item --configurelist <filename>

Configure hosts listed on <filename>. Hosts have to be listed one per line.
Lines starting with '#' are comments.

=item --remove <hostname>

Remove the configuration file for <hostname>.

=item --removelist <filename>

Remove configurations for hosts listed on <filename>. Hosts have to
be listed one per line. Lines starting with '#' are comments.

=item --removeall

Remove configurations for *ALL* hosts configured. Useful only in case
of problems/test.

=back

=head1 OPTIONS

=over 4

=item --templatedir <directory>

Directory where the template configuration files for the OS installation
have to be present (default value: @QTTR_LIB@/aii/osinstall).
A template configuration file is provided by the AII package.

=item --osinstalldir <directory>

Directory where the final configuration files are written
(default: /osinstall/ks). For KickStart files the filenames are in the form
<FQDN>.ks (e.g. node002.mydomain.org.ks).
The directory has to be available via NFS or HTTP.

=back

=head2 Other Options

=over

=item --help

Displays a help message with all options and default settings.

=item --version

Displays version information.

=item --verbose

Print verbose details on operations.

=item --debug <1..5>

Set the debugging level to <1..5>.

=item --quiet

Suppress application output to standard output.

=item --cfgfile <path>

Use as configuration file <path> instead of the default
configuration file @QTTR_ETC@/aii-osinstall.conf.

=item --logfile <file>

Store and append log messages in <file>.

=back

=head1 CONFIGURATION FILE

=over 4

Default values of command lines options can be specified in the file
/etc/aii-osinstall.conf using syntax:

 <option> = <value>

e.g.:

 osinstalldir = /my/personal/osinstall

=back

=head1 AUTHORS

Enrico Ferro <enrico.ferro@pd.infn.it>
Rafael A. Garcia Leiva <angel.leiva@uam.es>

=cut

#
# Standard Common Application Framework beginning sequence
#

#
# Beginning sequence for EDG initialization
#
BEGIN {

  # use perl libs in @QTTR_PERLLIB@
  unshift(@INC, '@QTTR_PERLLIB@');
  unshift(@INC,'/opt/edg/lib/perl');

}

#------------------------------------------------------------
# Application
#------------------------------------------------------------

package aii_osinstall;

use CAF::Application;
use CAF::Reporter;
use LC::Exception qw (SUCCESS throw_error);
use EDG::WP4::CCM::CacheManager;
use NCM::Template;

use strict;
use vars qw(@ISA);

@ISA = qw(CAF::Application CAF::Reporter NCM::Template);


#
# Public Methods/Functions for CAF
#
sub app_options {

    push(my @array,

        # aii-osinstall specific options

        { NAME    => 'configure=s',
          HELP    => 'Configure a node',
          DEFAULT => undef },

        { NAME    => 'configurelist=s',
          HELP    => 'File with the nodes to be configured',
          DEFAULT => undef },

        { NAME    => 'remove=s',
          HELP    => 'Remove a node',
          DEFAULT => undef },

        { NAME    => 'removelist=s',
          HELP    => 'File with the nodes to be removed',
          DEFAULT => undef },

        { NAME    => 'removeall',
          HELP    => 'Remove ALL nodes configured',
          DEFAULT => undef },

        # options for KickStart configuration

        { NAME    => 'osinstalldir=s',
          HELP    => 'Directory where OS configuration files are written',
          DEFAULT => '/osinstall/ks' },

        { NAME    => 'templatedir=s',
          HELP    => 'Directory containing OS installation templates',
          DEFAULT => '@QTTR_LIB@/aii/osinstall' },

        # other common options

        { NAME    => 'logfile=s',
          HELP    => 'path/filename to use for program logs',
          DEFAULT => "@QTTR_LOG@/aii-osinstall.log" },

        { NAME    => 'cfgfile=s',
          HELP    => 'configuration file for program defaults',
          DEFAULT => "@QTTR_ETC@/aii-osinstall.conf" }

        # options inherited from CAF
        #   --help
        #   --version
        #   --verbose
        #   --debug
        #   --quiet

        );

    return(\@array);

}

sub _initialize {

    my $self = shift;

    #
    # define application specific data.
    #

    # external version number
    $self->{'VERSION'} = '1.0';

    # show setup text
    $self->{'USAGE'} = "Usage: aii-osinstall [options]\n";

    #
    # log file policies
    #

    # append to logfile, do not truncate
    $self->{'LOG_APPEND'} = 1;

    # add time stamp before every entry in log
    $self->{'LOG_TSTAMP'} = 1;

    #
    # start initialization of CAF::Application
    #
    unless ($self->SUPER::_initialize(@_)) {
        return(undef);
    }

    # start using log file (could be done later on instead)
    $self->set_report_logfile($self->{'LOG'});

    return(SUCCESS);

}

#############################################################
# aii-osinstall main program
#############################################################

package main;

use File::Path;
use LC::Exception qw (SUCCESS throw_error);

use strict;
use vars qw($this_app %SIG);

# initialize exception context
my $ec = LC::Exception::Context->new->will_store_errors;

#
# Global Attributes:
#

my (@NTC, @NTR);
my ($OsinstallDir, $TemplateDir);

@NTC = (); # Nodes To Configure
@NTR = (); # Nodes To Remove

#
# remove_osinstall_config()
#
# Remove KickStart configuration files
#
# Implement commands:
#   --remove
#   --removelist
#   --removeall
#
sub remove_osinstall_config {

    my (@to_delete);
    my ($item);

    #
    # Support 'removeall' case
    #
    if ($this_app->option('removeall')) {

        $this_app->debug(2, "aii-osinstall: removing all config files");

        opendir(DIR, $OsinstallDir);
        @to_delete = (grep(/(\.ks$)|(^[A-F0-9]{8}$)/i, readdir(DIR)));
        closedir(DIR);

        chdir($OsinstallDir);
        unlink (@to_delete);

        $this_app->warn('aii-osinstall: removing all config files');

        return(0);

    }

    #
    # Remove entries contained in NTR array
    #

    foreach $item (@NTR) {
        $this_app->debug(2, "aii-osinstall: removing config files "
                            . "for $item->{FQDN}");
        unlink ($OsinstallDir . $item->{FQDN} . '.ks');
    }

    return(0);

}


#
# add_osinstall_config()
#
# Add new configuration files for those entries contained in NTC array
#
# Implement commands:
#   --configure
#   --configurelist
#
sub add_osinstall_config() {

    my ($cm, $cred, $cfg, $element, $value);
    my ($fname, $template, $path);
    my (@lines, @fields, @packages);
    my ($item);

    NTC:
    foreach $item (@NTC) {

        $this_app->debug(2, "aii-osinstall: adding configuration for "
                            . "host $item");

        # Open the node's fake Cache Manager
        # (there must be one CCM for each node to configure)
        $this_app->debug(3, "aii-osinstall: opening node's CCM: "
                            . "@QTTR_TMP@/aii/$item->{FQDN}");
        $cm = EDG::WP4::CCM::CacheManager->new("@QTTR_TMP@/aii/$item->{FQDN}");
        unless ($cm) {
	        $this_app->error($ec->error);
			$ec->ignore_error;
            return(1);
        }		

        # get (locked) current configuration
        $cred = 0;
        $cfg = $cm->getLockedConfiguration($cred);
        unless ($cfg) {
            $this_app->error($ec->error);
			$ec->ignore_error;
            return(1);
        }

        # get name of NBP configuration file template
        $element = $cfg->getElement(
                         '/system/aii/osinstall/template');
		unless ($element) {
    		$this_app->error($ec->error);
			$ec->ignore_error;
            return(1);
		}
        $fname   = $element->getValue();

        #
        # 02/06/2005
        # ----------
        #
        # Process the configuration template using the template processor library
        # Changes made by Cesar Lobo (cesar.lobo@uam.es)
        #
        $this_app->debug(3, "aii-osinstall: processing the configuration template");

        unless($this_app->Substitute($cfg,"$OsinstallDir$item->{FQDN}.ks",undef,"$TemplateDir$fname")) {

            $this_app->error("aii-osinstall: error processing the configuration template");
            return(1);

        }

    }

    return(0);

}

#
# new_entry($host, $mode)
#
# Check and add a node to the arrays NTC or NTR
#
sub new_entry($$) {

    my $host = shift;
    my $mode = shift;

    my ($fqdn, @all_address);

    #
    # check hostname
    #
    if (!defined($host) || $host eq '') {
        $this_app->warn("aii-osinstall: $mode node: missing hostname");
        return(1);
    }

    ($fqdn, @all_address) = (gethostbyname($host))[0,4];
    if ($#all_address < 0) {
        # The array is empty => invalid name
        $this_app->warn("aii-nbp: invalid hostname to $mode ($host)");
        return(1);
    }

    #
    # add it to the NTC or NTR array
    #
    if ($mode eq 'configure') {
        push(@NTC, {FQDN => $fqdn});
    } elsif ($mode eq 'remove') {
        push(@NTR, {FQDN => $fqdn});
    } else {
        $this_app->error("aii-osinstall: internal error "
                         ."(unknown operation=$mode)");
        return(1);
    }

    return(0);

}

#
# read_input()
#
# Read from command line and/or file lists the hostnames involved
# and save them in NTC or NTR arrays
#
sub read_input() {

    my ($host, $k);
    my ($filename, $item);
    my (@nodelist);

    #
    # Get nodes to configure/remove
    #

    for $k ('configure', 'remove') {

        # just one node (from command line)
        if ($this_app->option($k)) {
            new_entry($this_app->option($k), $k);
        }

        # more than one node (from a text file)
        if ($this_app->option($k.'list')) {

            $filename = $this_app->option($k.'list');
            if (!open(FILE, "< $filename")) {
                $this_app->warn("aii-osinstall: $k node list error:"
                                . " file access error: $filename");
                next;
            }

            $this_app->debug(2, "aii-osinstall: reading file $filename");
            @nodelist = <FILE>;
            close (FILE);

            foreach $item (@nodelist) {
                $item =~ s/[\s\n]//g; # remove spaces and \n
                if (($item ne "")  && ($item !~ /^\s*\#/)) {
                    new_entry($item, $k);
                }
            }

        }

    }

    return(0);

}

#------------------------------------------------------------
# main loop
#------------------------------------------------------------

# fix umask
umask (022);

# unbuffer STDOUT & STDERR
autoflush STDOUT 1;
autoflush STDERR 1;

# initialize the main class.
unless ($this_app = aii_osinstall->new($0, @ARGV)) {
    throw_error('aii-osinstall: cannot start application');
}

$OsinstallDir = $this_app->option('osinstalldir');
$OsinstallDir =~ s/\/?$/\//;
$TemplateDir  = $this_app->option('templatedir');
$TemplateDir  =~ s/\/?$/\//;

#
# Verify that path/filenames are good
#

if (! -d $OsinstallDir) {
    $this_app->error("aii-osinstall: invalid OS install configuration "
                     . "directory: $OsinstallDir");
    exit(1);
}
if (! -d $TemplateDir) {
    $this_app->error("aii-osinstall: invalid template directory: "
                     . $TemplateDir);
    exit(1);
}

# process command line options
$this_app->debug(1, "aii-osinstall: reading cmd line or input files ... ");
if(read_input()) {
    $this_app->error("aii-osinstall: "
                     . "failed to process cmd line or input files");
    exit(1);
}

# create/remove configuration files
if( scalar(@NTC) > 0 || scalar(@NTR) > 0 ) {
    $this_app->debug(1, "aii-osinstall: updating KickStart configuration");
    if (add_osinstall_config()){
        $this_app->error("aii-osinstall: failed to add new KickStart "
                         . "config files");
        exit(1);
    }
    if (remove_osinstall_config()){
        $this_app->error("aii-osinstall: failed to remove KickStart "
                         . "config files");
        exit(1);
    }
} else {
    $this_app->debug(1, "aii-osinstall: no KickStart configuration files "
                        . "to update");
}


exit(0);
