#
# i386_sl_ks.conf	KickStart configuration file for ScientificLinux 3/4
#
# This is a KickStart configuration file template used by the
# aii-osinstall utility of the Automated Installation Infrastructure,
# quattor toolkit (quattor.org)
# 
# Enrico Ferro \<enrico.ferro@pd.infn.it\>
# Rafael Garcia Leiva \<angel.leiva@uam.es\>
# Cesar Lobo \<cesar.lobo@uam.es\>
# Michel Jouvin \<jouvin@lal.in2p3.fr\>
#
# Copyright (c) 2005 EU DataGrid.
# For license conditions see http://www.eu-datagrid.org/license.html
#
# KickStart file generated at <DATE>
#

install		# Install (do not upgrade)
text		# Use text mode
reboot		# Reboot at the end
skipx		# Do not configure XWindow

# System language
lang        </system/aii/osinstall/options/lang>
langsupport --default </system/aii/osinstall/options/langsupp>

# Keyboard and mouse
keyboard    </system/aii/osinstall/options/keyboard>
mouse       </system/aii/osinstall/options/mouse>

# Timezone
timezone    --utc </system/aii/osinstall/options/timezone>

# Root password
rootpw      --iscrypted </system/aii/osinstall/options/rootpw>

# System bootloader configuration
bootloader  --location=mbr

# Installation type
</system/aii/osinstall/options/installtype>

# Clear the Master Boot Record?
<IF: /system/aii/osinstall/options/clearmbr>
zerombr     yes
<ENDIF>

# Clear the Partitition table?
# One clearpart command only is allowed

<SET: $path=/system/filesystems/disks>

<IF: /system/aii/osinstall/options/clearpart>
<SET: $drives=>
<FOREACH: $disk <$path>>
<LIF: <$drives> = >
<SET: $drives=<$disk>>
<ELSE:>
<SET: $drives=<$drives>,<$disk>>
<ENDLIF>
<ENDFOR>
clearpart --drives=<$drives> --all
<ENDIF>

##################################################################################
#
# Disk partitioning
# -----------------
#
#   The next partitioning code, allows to partition a clean system according
#   to the partitioning info found in the machine's profile under:
#
#       /system/filesystems/disks/...
#
#   It's impotant to insist on that this code will only work with clean disks
#   so the 'clearpart' option must be always true.
#
##################################################################################

<FOREACH: $disk <$path>>
<FOREACH: $part <$path>/<$disk>>

<SET: $fstype = <<$path>/<$disk>/<$part>/type>>

<LIF: <$fstype> = extended>

<FOREACH: $log_part <$path>/<$disk>/<$part>/logical_partitions>

<SET: $mountp = <<$path>/<$disk>/<$part>/logical_partitions/<$log_part>/mountpoint>>
<SET: $size   = <<$path>/<$disk>/<$part>/logical_partitions/<$log_part>/size>>
<SET: $fstype = <<$path>/<$disk>/<$part>/logical_partitions/<$log_part>/type>>
<SET: $ksopt  = >

<IF: <$path>/<$disk>/<$part>/logical_partitions/<$log_part>/ksopt>
<SET: $ksopt = <<$path>/<$disk>/<$part>/logical_partitions/<$log_part>/ksopt>>
<ENDIF>

part <$mountp> --size <$size> --fstype <$fstype> --ondisk <$disk> <$ksopt>

<ENDFOR>

<ELSE:>
<LIF: <$fstype> = lvm>

<SET: $vgname = <<$path>/<$disk>/<$part>/label>>
<SET: $pvname = pv.<$disk>>
<SET: $size   = <<$path>/<$disk>/<$part>/size>>
<SET: $ksopt  = >
<IF: <$path>/<$disk>/<$part>/ksopt>
<SET: $ksopt = <<$path>/<$disk>/<$part>/ksopt>>
<ENDIF>

part <$pvname> --size <$size> --ondisk <$disk> <$ksopt>
volgroup <$vgname> <$pvname>

<FOREACH: $log_part <$path>/<$disk>/<$part>/logical_partitions>

<SET: $mountp = <<$path>/<$disk>/<$part>/logical_partitions/<$log_part>/mountpoint>>
<SET: $size   = <<$path>/<$disk>/<$part>/logical_partitions/<$log_part>/size>>
<SET: $fstype = <<$path>/<$disk>/<$part>/logical_partitions/<$log_part>/type>>
<SET: $ksopt  = >

<IF: <$path>/<$disk>/<$part>/logical_partitions/<$log_part>/ksopt>
<SET: $ksopt = <<$path>/<$disk>/<$part>/logical_partitions/<$log_part>/ksopt>>
<ENDIF>

logvol <$mountp> --size <$size> --fstype <$fstype> --name <$log_part> --vgname <$vgname> <$ksopt>

<ENDFOR>

<ELSE:>

<SET: $mountp = <<$path>/<$disk>/<$part>/mountpoint>>
<SET: $size   = <<$path>/<$disk>/<$part>/size>>
<SET: $ksopt  = >

<IF: <$path>/<$disk>/<$part>/ksopt>
<SET: $ksopt = <<$path>/<$disk>/<$part>/ksopt>>
<ENDIF>

part <$mountp> --size <$size> --asprimary --fstype <$fstype> --ondisk <$disk> <$ksopt>

<ENDLIF>
<ENDLIF>

<ENDFOR>
<ENDFOR>

# Network configuration
# Don't define any explicit network configuration, Kickstart will configure through DHCP the interface
# used to boot Kickstart. This autoconfiguration is the only working configuration (with RHEL3) in
# of machines with several NICs where you don't use eth0. In this case, putting a 'network' line
# will configure all interfaces (from eth0 up to ethn you use to boot) with the same parameters,
# including IP address in case of static configuration (in case of DHCP, the interface will be
# configured with ONBOOT=yes leading to a DHCP error during the boot but without any operational
# impact).
# Michel Jouvin - (jouvin@lal.in2p3.fr) - LAL / IN2P3 - France
#network     --bootproto static  --ip </system/network/interfaces/eth0/ip>  --netmask </system/network/interfaces/eth0/netmask>  --gateway </system/network/interfaces/eth0/gateway>  --nameserver </system/network/nameserver/0>
network     --bootproto dhcp

# Authorization
auth        </system/aii/osinstall/options/auth>

# Firewall configuration
firewall    </system/aii/osinstall/options/firewall>

# Packages groups/list
%packages --resolvedeps --ignoremissing

</system/aii/osinstall/options/packages>


#
# Post installation script
#

%post

#
# create /etc/rc.d/init.d/ks-post-reboot and
# modify the startup sequence to run it at the first reboot
#

cat \<\<End_Of_Post_Reboot \>/etc/rc.d/init.d/ks-post-reboot
#!/bin/sh -x
#-----------------------------------------------------------------------------
#
# script to run at the first reboot
#
#-----------------------------------------------------------------------------

fail () {
echo "Quattor installation failed: \$1"
cat /root/ks-post-install.log | mail -s "Quattor installation failed : \$1" </system/rootmail>
exit -1
}

# ensure that the logfile does not exist.

[ -e /root/ks-post-install.log ] && \\
fail "last installation went wrong, aborting - see logfile "

# redirect the output to the log file
exec \> /root/ks-post-install.log 2\>&1

# show the output on the seventh console
tail -f /root/ks-post-install.log \> /dev/tty7 &


###########################################################################
#
# Install the Quattor client
#
###########################################################################

# Note: The following block (between SPMA-start and SPMA-end) is specific
#       to clients running SPMA. If you want to use APT/YUM instead
#       for managing your clients, you must *remove* the complete block,
#       and replace it with:
#          1. adding the Quattor APT repository to the
#             APT/Yum configuration
#          2. run:
#              'apt-get update && apt-get install quattor-client' (for APT)
#              'yum install quattor-client' (for YUM)
#
#       See the APT/Yum chapter of the Quattor installation guide for
#       details on how to do this.

#--------------------------------------------------------------------------
# SPMA-start
#--------------------------------------------------------------------------
#
# install CCM, NCM, SPMA and friends
#

CDBSERVER=</system/aii/osinstall/options/cdb>
HOST=</system/aii/osinstall/options/hostname>


# Quattor generic libraries and External Packages

/bin/rpm -Uvh \\
   <PACKAGEPATH:perl-Proc-ProcessTable>/<PACKAGE:perl-Proc-ProcessTable>	\\
   <PACKAGEPATH:perl-Compress-Zlib>/<PACKAGE:perl-Compress-Zlib>	\\
   <PACKAGEPATH:perl-LC>/<PACKAGE:perl-LC>		\\
   <PACKAGEPATH:perl-AppConfig-caf>/<PACKAGE:perl-AppConfig-caf>    \\
   <PACKAGEPATH:perl-CAF>/<PACKAGE:perl-CAF>		\\
   || fail "rpm failed (\$?)"
    
# Configuration Cache Manager

/bin/rpm -Uvh \\
   <PACKAGEPATH:ccm>/<PACKAGE:ccm>			\\
   || fail "rpm failed (\$?)"

# Node Configuration Deployer

/bin/rpm -Uvh \\
   <PACKAGEPATH:ncm-ncd>/<PACKAGE:ncm-ncd>		\\
   <PACKAGEPATH:ncm-query>/<PACKAGE:ncm-query>		\\
   <PACKAGEPATH:ncm-template>/<PACKAGE:ncm-template>		\\
   || fail "rpm failed (\$?)"

# Software Package Management Agent

/bin/rpm -Uvh \\
   <PACKAGEPATH:rpmt-py>/<PACKAGE:rpmt-py>			\\
   <PACKAGEPATH:spma>/<PACKAGE:spma>			\\
   <PACKAGEPATH:ncm-spma>/<PACKAGE:ncm-spma>		\\
   || fail "rpm failed (\$?)"

# CDP listend daemon

/bin/rpm -Uvh \\
   <PACKAGEPATH:cdp-listend>/<PACKAGE:cdp-listend>		\\
   || fail "rpm failed (\$?)"

# Configuration Dispatch Daemon

/bin/rpm -Uvh \\
   <PACKAGEPATH:ncm-cdispd>/<PACKAGE:ncm-cdispd>		\\
   || fail "rpm failed (\$?)"

#
# At this point, the Kernel must be upgraded (see Savannah #5007)
#

#<IF: /software/packages/kernel>
#/bin/rpm -ivh <PACKAGEPATH:kernel>/<PACKAGE:kernel>
#<ENDIF>

#<IF: /software/packages/kernel2dsmp>
#/bin/rpm -ivh <PACKAGEPATH:kernel-smp>/<PACKAGE:kernel-smp>
#<ENDIF>

#--------------------------------------------------------------------------
# SPMA-end
#--------------------------------------------------------------------------


###########################################################################
#
# Configure the Quattor client
#
###########################################################################


# Create the initial CCM configuration file

cat \<\<End_Of_CCM_Conf \> /etc/ccm.conf
profile			http://\$CDBSERVER/profiles/profile_\$HOST.xml
End_Of_CCM_Conf

# initialise the CCM

/usr/sbin/ccm-initialise \\
    || fail "CCM intialization failed (\$?)"

# Download my configuration profile

/usr/sbin/ccm-fetch || fail "ccm-fetch failed (\$?)"

# Upgrade the system

/usr/sbin/ncm-ncd --configure spma \\
    || fail "/usr/sbin/ncm-ncd --configure spma failed"
/usr/bin/spma --userpkgs=no --userprio=no \\
    || fail "/usr/bin/spma failed"
/usr/sbin/ncm-ncd --configure --all

#
# cleanup so that we're not called anymore
#
rm -f /etc/rc.d/rc3.d/S86ks-post-reboot

#
# reboot once more then,
# quattor will take control of the node
#
shutdown -r now

#
exit 0

# end of post reboot script
#-----------------------------------------------------------------------------
End_Of_Post_Reboot


<SET: $ksdevice = </system/aii/nbp/options/ksdevice>>
<SET: $net_driverrpms_path = /hardware/cards/nic/<$ksdevice>/driverrpms>
<IF: <$net_driverrpms_path>>

# Install Network driver if not in standard distribution
# driverrpm property is interpreted as space separated list (allow smp and non smp install)
# Be sure to rebuild module dependencies for all kernels installed
# (kernel during installation is probably not the production one, e.g. non smp).
# This sometimes not properly done in the RPM (e.g. improper path for depmod).

net_driver_log="/root/net-driver-install.log"

net_driver_failed () {
    error_msg="Failed to install network driver for <$ksdevice> ($1). See log file $net_driver_log"
    /bin/echo "$error_msg"
    /bin/cat $net_driver_log
    /bin/cat $net_driver_log | /bin/mail -s "Quattor installation failed ($error_msg)" </system/rootmail> \>\> $net_driver_log 2\>&1
    exit -1
}

<FOREACH: $net_driver_num <$net_driverrpms_path>>
<SET: $net_driver_rpm = <<$net_driverrpms_path>/<$net_driver_num>>>
net_driver_path="<PACKAGEPATH:<$net_driver_rpm>>/<PACKAGE:<$net_driver_rpm>>"
/bin/echo "Installing <$net_driver_rpm> ($net_driver_path)..." \>\> $net_driver_log 2\>&1
/bin/rpm -Uvh $net_driver_path  \>\> $net_driver_log 2\>&1
if [ $? -ne 0 ]
then
    net_driver_failed "rpm <$net_driver_rpm> failure"
fi
<ENDFOR>

kernels=`ls /lib/modules`
for kernel in $kernels
do
    /bin/echo "Rebuilding module dependencies for kernel $kernel..." \>\> $net_driver_log 2\>&1
    /sbin/depmod $kernel \>\> $net_driver_log 2\>&1
    if [ $? -ne 0 ]
    then
        net_driver_failed "depmod failure"
    fi
done

<ENDIF>
 
#
# hook the post reboot script into rc.d
#
chmod +x /etc/rc.d/init.d/ks-post-reboot
ln -s /etc/rc.d/init.d/ks-post-reboot /etc/rc.d/rc3.d/S86ks-post-reboot

#
# Switch off pxeboot
#

wget -q --output-document=- </system/aii/osinstall/options/ackurl>
