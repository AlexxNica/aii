################################################################################
# This is '@SELF@', a @NAME@'s file
################################################################################
#
# VERSION:    @VERSION@, @DATE@
# AUTHOR:     @AUTHOR@
# MAINTAINER: @MAINTAINER@
# LICENSE:    @LICENSE@
#
################################################################################
# Coding style: emulate <TAB> characters with 4 spaces, thanks!
################################################################################
#
# This file is the standard AII configuration. It only performs some
# validations, combines information that is already available, and 
# set sensible default values.
#
# This file should NOT contain any site or platform customization.
#
################################################################################

unique template quattor/aii/config;

include quattor/functions/network;
include quattor/functions/filesystem;
include quattor/aii/schema;


# For convenience
variable AII_DOMAIN ?= value('/system/network/domainname');
variable AII_HOSTNAME ?= value('/system/network/hostname');


####################################################
# KickStart configuration (OS independent options)
####################################################


# Kickstart template to use
# Be sure AII_OSINSTALL_TEMPLATE matches osinstall/template in case the latter was defined first.
# For backward compatibility, as in previous versions, osinstall/template was explicitly defined by sites.
variable AII_OSINSTALL_TEMPLATE ?= "sl_ks.conf";
"/system/aii/osinstall/template" ?= AII_OSINSTALL_TEMPLATE;
variable AII_OSINSTALL_TEMPLATE = value("/system/aii/osinstall/template");


#
# OS installation server has to be defined via variable AII_OS_INSTALL_SRV.
# No default value is meaningfull. Display an error if not defined previously.
# Also ensure that AII_OSINSTALL_SRV has no  trailing /.
#
variable AII_OSINSTALL_SRV ?= {
    error("You need to define variable  AII_OSINSTALL_SRV (generally the Quattor server) "
          + " in order to use AII templates");
};
variable AII_OSINSTALL_SRV = {
  toks = matches(AII_OSINSTALL_SRV,'^(.*)/$');
  if ( length(toks) < 2 ) {
    return(self);
  } else {
    return(toks[1]);
  };
};


#
# KS configuration files server
# defaults to OS installation server
#
variable AII_KS_SRV ?= AII_OSINSTALL_SRV;


#
# CDB server, needed to retrieve the node profile
# defaults to OS installation server
#
variable AII_CDB_SRV ?= AII_OSINSTALL_SRV;

#
#
#
variable AII_OSINSTALL_PATH ?= undef;

#
# Installation protocol (http or nfs)
# defaults to http
#
variable AII_OSINSTALL_PROTOCOL ?= if ( exists("/system/aii/osinstall/options/osinstall_protocol") ) {
                                     error('Use AII_OSINSTALL_PROTOCOL to define installation protocol');
                                   } else {
                                     return('http');
                                   };
"/system/aii/osinstall/options/osinstall_protocol" ?= AII_OSINSTALL_PROTOCOL;
# Be sure AII_OSINSTALL_PROTOCOL matches osinstall_protocol in case the latter was defined first.
# For backward compatibility, as in previous versions, osinstall_protocol was explicitly defined by sites.
variable AII_OSINSTALL_PROTOCOL = value('/system/aii/osinstall/options/osinstall_protocol');


#
# Define OS installation path based on OS version
# If AII_OSINSTALL_ROOT,AII_OS_VERSION and AII_OSINSTALL_PATH are undefined, assume
# /software/components/aii/osinstall/options/installtype has been defined explicitly
# (backward compatibility, deprecated). If not, quattor/aii/config will handle it.
#
variable AII_OSINSTALL_ROOT ?= undef;
variable AII_OSINSTALL_OS_VERSION ?= undef;
# AII_OSINSTALL_SUBURL allows to specify a sub-url under root/version (e.g. /base)
variable AII_OSINSTALL_SUBURL ?= undef;
variable AII_OSINSTALL_PATH ?= if ( is_defined(AII_OSINSTALL_ROOT) && is_defined(AII_OSINSTALL_OS_VERSION) ) {
                                 path = AII_OSINSTALL_ROOT + '/' + AII_OSINSTALL_OS_VERSION;
                                 if ( is_defined(AII_OSINSTALL_SUBURL) ) {
                                   path = path + AII_OSINSTALL_SUBURL;
                                 };
                                 return(path);
                               } else {
                                 return(undef);
                               };


#
# Install type and URL (for http or https) or directory (for NFS) 
# with the OS distribution
# For backward compatibility (deprecated), allow installtype to be defined explicicly
# rather than from AII_OSINSTALL_xxx variables.
#
"/system/aii/osinstall/options/installtype" ?= {
    if ( !exists(AII_OSINSTALL_PATH) || !is_defined(AII_OSINSTALL_PATH) ) {
      error("You need to define the variable AII_OSINSTALL_PATH or AII_OSINSTALL_ROOT "
          + "(OS distribution location on the Quattor server)");
    };
    
    if ( match(AII_OSINSTALL_PROTOCOL,"^https?") )  {
        return("url --url " + AII_OSINSTALL_PROTOCOL + "://" + AII_OSINSTALL_SRV + AII_OSINSTALL_PATH);
    } else if ( match(AII_OSINSTALL_PROTOCOL,"(?i)nfs") ) {
        return("nfs --server " + AII_OSINSTALL_SRV + " --dir " + AII_OSINSTALL_PATH);
    } else {
      error('Unsupported OS installation protocol: '+AII_OSINSTALL_PROTOCOL);
    };
};

#
# Language during installation process
#
variable AII_OSINSTALL_OPTION_LANG ?= "en_US";
"/system/aii/osinstall/options/lang" ?= AII_OSINSTALL_OPTION_LANG;


#
# Language installed
#
variable AII_OSINSTALL_OPTION_LANG_SUPP ?= AII_OSINSTALL_OPTION_LANG;
"/system/aii/osinstall/options/langsupp" ?= AII_OSINSTALL_OPTION_LANG_SUPP;


#
# Keyboard layout
#
variable AII_OSINSTALL_OPTION_KEYBOARD ?= "us";
"/system/aii/osinstall/options/keyboard" ?= AII_OSINSTALL_OPTION_KEYBOARD;


#
# Mouse type
#
variable AII_OSINSTALL_OPTION_MOUSE ?= "none";
"/system/aii/osinstall/options/mouse" ?= AII_OSINSTALL_OPTION_MOUSE;


#
# Time zone
#
variable AII_OSINSTALL_OPTION_TIMEZONE ?= "Europe/Paris";
"/system/aii/osinstall/options/timezone" ?= AII_OSINSTALL_OPTION_TIMEZONE;


#
# Root Password (for example: aii)
# by default, derived from the account component
#
variable AII_OSINSTALL_ROOTPW ?= value("/software/components/accounts/rootpwd");
"/system/aii/osinstall/options/rootpw" ?= AII_OSINSTALL_ROOTPW; 


#
# Clear the master boot record?
# default is to clear the boot record
#
variable AII_OSINSTALL_OPTION_CLEARMBR ?= "true";
"/system/aii/osinstall/options/clearmbr" ?= AII_OSINSTALL_OPTION_CLEARMBR;

#
# The location of the bootloader. 
# Valid values are: "mbr", "partition", "none"
# default is "mbr"
#
variable AII_OSINSTALL_OPTION_BOOTLOADER ?= "mbr";
"/system/aii/osinstall/options/bootloader_location" ?= AII_OSINSTALL_OPTION_BOOTLOADER;

#
# Clear the partition table?
# default is to clear the partition table
#
variable AII_OSINSTALL_OPTION_CLEARPART ?= "true";
"/system/aii/osinstall/options/clearpart" ?= AII_OSINSTALL_OPTION_CLEARPART;


#
# Options for authentication
# defaults to using shadow passwords and MD5 hashing
#
variable AII_OSINSTALL_OPTION_AUTH ?= "--enableshadow --enablemd5";
"/system/aii/osinstall/options/auth" ?= AII_OSINSTALL_OPTION_AUTH;


#
# Firewall
# default is to disable the firewall
#
variable AII_OSINSTALL_OPTION_FIREWALL ?= "--disabled";
"/system/aii/osinstall/options/firewall" ?= AII_OSINSTALL_OPTION_FIREWALL;


#
# Minimal package sets to install
# default list of packages required for the initial installation
#
variable AII_OSINSTALL_PACKAGES ?= <<EOF;
openssh
openssh-server
wget
perl-libnet
perl-MIME-Base64
perl-URI
perl-Digest-MD5
perl-libwww-perl
perl-XML-Parser
perl-DBI
perl-Crypt-SSLeay
lsof
curl
EOF

"/system/aii/osinstall/options/packages" ?= AII_OSINSTALL_PACKAGES;


#
# URL CGI script for acknowledge "install successful, do not install on next boot"
#
# Note that in the default value assigned is assumed that the OS installation 
# server is the same as the PXE (DHCP+TFTP) one. 
# If is not true, the following variables should be set to define the PXE server:
#    AII_ACK_SRV : the name of the PXE server
#    AII_ACK_CGI : the location of the acknowledgement script to end the installation
#
# If the variables are undefined, the defaults are set below.
#
variable AII_ACK_SRV ?= AII_OSINSTALL_SRV;
variable AII_ACK_CGI ?= "/cgi-bin/aii-installack.cgi";
"/system/aii/osinstall/options/ackurl" = 
    "http://" + AII_ACK_SRV + AII_ACK_CGI;


#
# Set the location of the node profile
#
variable AII_USE_CCM ?= exists("/software/components/ccm") && is_defined("/software/components/ccm");
variable AII_PROFILE_PATH ?= "/profiles";
variable AII_OSINSTALL_NODEPROFILE ?= {
    if (AII_USE_CCM) {
        if (exists("/software/components/ccm/profile") && !(value("/software/components/ccm/profile") == '' )) {
            return(value("/software/components/ccm/profile"));
        } else {
            error("Can't find value for the profile url at /software/components/ccm/profile. If you don't use ccm, set the variable AII_USE_CCM to false.");
        };
    } else {
        return("http://" + AII_CDB_SRV + AII_PROFILE_PATH + "/" + object + ".xml");
    };
};
"/system/aii/osinstall/options/node_profile" ?= AII_OSINSTALL_NODEPROFILE; 

#
# For more details on Kickstart options see RedHat documentation:
# http://www.redhat.com/docs/manuals/enterprise/RHEL-3-Manual/sysadmin-guide/ch-kickstart2.html
#

###########################################################
# End of KickStart configuration (OS independent options)
###########################################################


############################
# DHCP daemon configuration
############################

#
# TFTP server
# This is optional. Only it is necessary if your TFTP server is running on
# a different machine than the DHCP server
#
# "/system/aii/dhcp/options/tftpserver" = "tftp.mydomain.org"
#
variable AII_DHCP_TFTPSERVER ?= null;
"/system/aii/dhcp/options/addoptions" ?= AII_DHCP_TFTPSERVER;

#
# Additional DHCP options (optional).
# Warning: They will be added in the host declaration of dhcpd.conf file, so 
# do not forget the ';' at the end
#
#"/system/aii/dhcp/addoptions" = "options blu-blo-bli bla;";
#
variable AII_DHCP_ADDOPTIONS ?= null;
"/system/aii/dhcp/options/addoptions" ?= AII_DHCP_ADDOPTIONS;


###################################
# End of DHCP daemon configuration
###################################


##############################################
# NBP configuration (OS independent options)
##############################################

#
# Kickstart file location
# defaults to the /ks directory on the KS installation server
#
variable AII_KS_PATH ?= {
    if (AII_OSINSTALL_PROTOCOL == "http") {
        return("/ks");
    }
    else {
        return("/osinstall/ks");
    };
};

variable AII_KS_CONFIG_FILE ?= AII_KS_PATH + "/" + AII_HOSTNAME + "." + AII_DOMAIN + ".ks";
"/system/aii/nbp/options/kslocation" ?= {
    if (AII_OSINSTALL_PROTOCOL == "http") {
        s = "http://" + AII_KS_SRV;
    } else {
        s = "nfs:" + AII_KS_SRV + ":";
    };
    return(s + AII_KS_CONFIG_FILE);
};


"/system/aii/nbp/options/ksdevice" ?= boot_nic();


#
# pxelinux configuration template to be used.
#
variable AII_OSINSTALL_NBP_TEMPLATE = "sl_pxe.conf";
"/system/aii/nbp/template" ?= AII_OSINSTALL_NBP_TEMPLATE;

#
# Label for the boot loader
#
variable AII_NBP_LABEL ?= {
  if ( !is_defined(AII_OSINSTALL_OS_VERSION) ) {
    return(undef);
  };
  toks =  matches(AII_OSINSTALL_OS_VERSION, '^(slc?|rhel)(\w+?)[_\-](.*)');
  if ( length(toks) < 4 ) {
    label = undef;
  } else {
    if ( toks[1] == 'sl' ) {
      label = 'Scientific Linux ';
    } else if ( toks[1] == 'slc' ) {
      label = 'Scientific Linux CERN ';
    } else if ( toks[1] == 'rhel' ) {
      label = 'Red Hat Entreprise Linux ';
    } else {
      label = undef;
    };
    if ( is_defined(label) ) {
      label = label + toks[2] + ' ('+ toks[3] + ')';
    };
  };
  return(label);
};

"/system/aii/nbp/options/label" ?= if ( is_defined(AII_NBP_LABEL) ) {
                                                  return(AII_NBP_LABEL);
                                                } else {
                                                  if ( is_defined(AII_OSINSTALL_OS_VERSION) ) {
                                                    return("Scientific Linux "+AII_OSINSTALL_OS_VERSION);
                                                  } else {
                                                    return(undef);
                                                  };
                                                };


#
# Relative path (from /tftpboot) of the initial ram disk and kernel.
# By default use 'version_arch'.
#
variable AII_NBP_ROOT ?= {
  if ( !is_defined(AII_OSINSTALL_OS_VERSION) ) {
    return(undef);
  };
  toks =  matches(AII_OSINSTALL_OS_VERSION, '^(slc?|rhel)(\w+?)[_\-](.*)');
  if ( length(toks) < 4 ) {
    root = undef;
  } else {
    root = toks[1] + toks[2] + '_'+ toks[3];
  };
  return(root);
};

"/system/aii/nbp/options/kernel" ?= if ( is_defined(AII_OSINSTALL_OS_VERSION) ) {
                                                   return(AII_NBP_ROOT+'/vmlinuz');
                                                 } else {
                                                   return(undef);
                                                 };

"/system/aii/nbp/options/initrd" ?= if ( is_defined(AII_OSINSTALL_OS_VERSION) ) {
                                                   return(AII_NBP_ROOT+'/initrd.img');
                                                 } else {
                                                   return(undef);
                                                 };


############################
# End of NBP configuration #
############################

